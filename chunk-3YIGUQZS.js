import{L as n}from"./chunk-BDJXH6CQ.js";var s=class e{blogPosts=[{id:"como-manejar-rutas-anidadas-angular",title:"C\xF3mo manejar rutas anidadas en Angular",description:"Aprende a configurar rutas anidadas paso a paso.",content:'\xBFQu\xE9 son las rutas anidadas? Las rutas anidadas en Angular permiten cargar diferentes "p\xE1ginas" dentro de una p\xE1gina principal, sin recargar toda la aplicaci\xF3n. Es como tener una p\xE1gina con varias secciones que muestran contenido distinto cuando haces clic en un enlace. Imaginemos que tienes un blog. La p\xE1gina principal muestra una lista de publicaciones, y al hacer clic en una publicaci\xF3n, se muestra el contenido completo de esa publicaci\xF3n, todo sin recargar la p\xE1gina. \xBFC\xF3mo hacerlo paso a paso? 1. Configurar las rutas: Las rutas son como direcciones web que le dec\xEDs a Angular que debe seguir. Por ejemplo: Si alguien visita /blog, debe ver la lista de publicaciones. Si visita /blog/1, debe ver los detalles de la publicaci\xF3n n\xFAmero 1. Esto se configura en el archivo de rutas (app-routing.module.ts o similar). 2. Crear el componente principal (padre): Este ser\xE1 el "contenedor" de la p\xE1gina. En este caso, ser\xE1 el BlogComponent, que tendr\xE1: Un t\xEDtulo, como "Bienvenido a mi Blog". Un espacio vac\xEDo donde Angular mostrar\xE1 las "subp\xE1ginas", usando <router-outlet>. 3. Crear los componentes hijos: Aqu\xED se definen los componentes que veremos dentro del contenedor: Lista de publicaciones: Muestra los t\xEDtulos y un resumen de las publicaciones. Detalles de la publicaci\xF3n: Muestra el contenido completo de la publicaci\xF3n seleccionada. 4. Usar <router-outlet>: Dentro del componente principal (BlogComponent), necesit\xE1s un espacio donde se cargar\xE1n las subp\xE1ginas. Esto se hace con la etiqueta <router-outlet>. Cuando vas a /blog, el espacio se llena con la lista de publicaciones. Cuando vas a /blog/1, el espacio se llena con los detalles de la publicaci\xF3n. Ejemplo pr\xE1ctico paso a paso 1. Paso 1: Crear las rutas: Definimos las rutas en el archivo de rutas: /blog carga el componente principal (BlogComponent). /blog muestra la lista de publicaciones. /blog/:id muestra los detalles de una publicaci\xF3n seg\xFAn el ID de la URL. 2. Paso 2: Crear el componente principal: Este componente ser\xE1 el "marco" que contiene todo. Usar\xE1 <router-outlet> para mostrar las subp\xE1ginas. 3. Paso 3: Crear el componente de lista de publicaciones: Este componente muestra una lista de publicaciones, por ejemplo: Publicaci\xF3n 1: "Introducci\xF3n al Blog" Publicaci\xF3n 2: "C\xF3mo crear rutas en Angular" Al hacer clic en una publicaci\xF3n, Angular te lleva a la p\xE1gina de detalles. 4. Paso 4: Crear el componente de detalles de la publicaci\xF3n: Este componente mostrar\xE1 la publicaci\xF3n completa. Si est\xE1s en /blog/1, Angular buscar\xE1 la publicaci\xF3n con el ID 1 y mostrar\xE1 su contenido. Resumen del flujo 1. El usuario entra a /blog. Angular carga el BlogComponent (contenedor) y dentro de \xE9l muestra la lista de publicaciones. 2. El usuario hace clic en una publicaci\xF3n. Angular navega a /blog/1 (o el ID correspondiente) y muestra los detalles de esa publicaci\xF3n en el espacio designado con <router-outlet>. As\xED, las subp\xE1ginas (como los detalles de la publicaci\xF3n) se cargan dentro de la p\xE1gina principal sin recargar toda la aplicaci\xF3n.'},{id:"mejorando-accesibilidad-proyectos-web",title:"Mejorando la accesibilidad en tus proyectos web",description:"Consejos para interfaces accesibles y amigables.",content:"Contenido completo del post sobre accesibilidad."},{id:"introduccion-typescript",title:"Introducci\xF3n a TypeScript",description:"Gu\xEDa b\xE1sica para empezar con TypeScript.",content:"Ut suscipit eros sed nisl tempus, vitae consectetur risus vehicula. Donec mollis consectetur sapien vel consequat. Integer ut nulla sit amet sapien gravida pretium nec vel justo."}];constructor(){}getPosts(){return this.blogPosts}getPostById(o){return this.blogPosts.find(a=>a.id===o)}static \u0275fac=function(a){return new(a||e)};static \u0275prov=n({token:e,factory:e.\u0275fac,providedIn:"root"})};export{s as a};
